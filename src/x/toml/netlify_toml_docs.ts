const fence = "```"

export const build_base_description = `
Directory to change to before starting a build.
This is where we will look for package.json/.nvmrc/etc.
If not set, defaults to the root directory.`.trim()

export const build_publish_description = `
Directory that contains the deploy-ready HTML files and assets generated by
the build. This is relative to the base directory if one has been set, or the
root directory if a base has not been set"
`.trim()

export const build_command_description = `Default build command`

export const build_description = `
Settings in the [build] context are global and are applied to all contexts
unless otherwise overridden by more specific contexts.`.trim()

export const Redirect_force_description = `By default, redirects won’t be applied if there’s a file with the same
path as the one defined in the "from" property. Setting "force" to "true"
will make the redirect rule take precedence over any existing files.`.trim()

export const Plugin_package_description = `
* For a plugin installed from npm, the npm package name of the plugin.
* For a local plugin, the path to a directory containing the plugin’s index.js and manifest.yml files. The package value for a local plugin must start with . or /.
`.trim()

export const Functions__external_node_modules__d = `
A list of Node.js modules that are copied to the bundled artifact
without adjusting their source or references during the bundling process;
only applies when \`node_bundler\` is set to \`esbuild\`.
This property helps handle dependencies that can’t be inlined,
such as modules with native add-ons.`.trim()

export const Functions__included_files__d = `
A list of additional paths to include in the function bundle.
Although our build system includes statically referenced files (like \`require("./some-file.js")\`) by default,
included_files lets you specify additional files or directories and reference them dynamically in function code.
You can use \`*\` to match any character or prefix an entry with \`!\` to exclude files.
Paths are relative to the [base directory](https://docs.netlify.com/configure-builds/get-started/#definitions-1).
`

export const esbuild = `[ESBuild](https://esbuild.github.io/) - an extremely fast bundler`
export const zisi = `
[Zip it and Ship It](https://github.com/netlify/zip-it-and-ship-it)

Creates Zip archives from Node.js, Go, and Rust programs. Those archives are ready to be uploaded to AWS Lambda.
This library is used under the hood by several Netlify features,
including production CI builds, Netlify CLI and the JavaScript client.`

export const Dev__jwtRolePath__d = `
The object path that points to role values for JWT-based redirects.

Example:
${fence} toml
jwtRolePath = "app_metadata.authorization.roles"
${fence}
`.trim()

export const urls = {
  edge_handlers:
    "https://docs.netlify.com/configure-builds/file-based-configuration/#edge-handlers",
  ignore_builds:
    "https://docs.netlify.com/configure-builds/file-based-configuration/#ignore-builds",
  redirects:
    "https://docs.netlify.com/configure-builds/file-based-configuration/#redirects",
  headers:
    "https://docs.netlify.com/configure-builds/file-based-configuration/#headers",
  context: "https://docs.netlify.com/site-deploys/overview/#deploy-contexts",
}
